#!/bin/bash

# EPG Control Script - Manage all services for Envision Production Group
# Usage: ./epg-control <command> [service] [environment]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

# Default environment
ENVIRONMENT=${3:-development}
ENV_FILE="$PROJECT_ROOT/.env.$ENVIRONMENT"

# Load environment variables
if [[ -f "$ENV_FILE" ]]; then
    export $(grep -v '^#' "$ENV_FILE" | xargs)
    echo -e "${GREEN}✓ Loaded environment: $ENVIRONMENT${NC}"
else
    echo -e "${RED}✗ Environment file not found: $ENV_FILE${NC}"
    exit 1
fi

# Service definitions
declare -A SERVICES=(
    ["database"]="database"
    ["strapi"]="strapi-cms"
    ["customer"]="customer-website" 
    ["employee"]="employee-ops"
    ["all"]="database,strapi,customer,employee"
)

# PID file locations
PID_DIR="$PROJECT_ROOT/.pids"
mkdir -p "$PID_DIR"

# Logging
LOG_DIR="$PROJECT_ROOT/logs"
mkdir -p "$LOG_DIR"

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# Database management
start_database() {
    log "Starting PostgreSQL database..."
    
    if docker ps | grep -q epg-postgres; then
        warning "Database already running"
        return 0
    fi
    
    cd "$PROJECT_ROOT/infrastructure"
    docker compose -f docker-compose.db.yml --env-file "$ENV_FILE" up -d
    
    # Wait for database to be ready
    log "Waiting for database to be ready..."
    timeout=30
    while ! docker exec epg-postgres pg_isready -U "$DB_USER" -d "$DB_NAME" > /dev/null 2>&1; do
        sleep 1
        timeout=$((timeout - 1))
        if [[ $timeout -eq 0 ]]; then
            error "Database failed to start within 30 seconds"
            exit 1
        fi
    done
    
    success "Database started successfully"
}

stop_database() {
    log "Stopping PostgreSQL database..."
    cd "$PROJECT_ROOT/infrastructure"
    docker compose -f docker-compose.db.yml down
    success "Database stopped"
}

restart_database() {
    stop_database
    start_database
}

# Strapi CMS management
start_strapi() {
    log "Starting Strapi CMS..."
    
    if [[ -f "$PID_DIR/strapi.pid" ]]; then
        local pid=$(cat "$PID_DIR/strapi.pid")
        if kill -0 "$pid" 2>/dev/null; then
            warning "Strapi already running (PID: $pid)"
            return 0
        fi
    fi
    
    cd "$PROJECT_ROOT/strapi-cms"
    
    # Install dependencies if needed
    if [[ ! -d "node_modules" ]]; then
        log "Installing Strapi dependencies..."
        npm install
    fi
    
    # Start Strapi
    if [[ "$ENVIRONMENT" == "development" ]]; then
        nohup npm run develop > "$LOG_DIR/strapi.log" 2>&1 &
    else
        # Build for production
        npm run build
        nohup npm start > "$LOG_DIR/strapi.log" 2>&1 &
    fi
    
    echo $! > "$PID_DIR/strapi.pid"
    success "Strapi started (PID: $!)"
}

stop_strapi() {
    log "Stopping Strapi CMS..."
    
    if [[ -f "$PID_DIR/strapi.pid" ]]; then
        local pid=$(cat "$PID_DIR/strapi.pid")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            rm "$PID_DIR/strapi.pid"
            success "Strapi stopped"
        else
            warning "Strapi not running"
            rm -f "$PID_DIR/strapi.pid"
        fi
    else
        warning "Strapi PID file not found"
    fi
}

restart_strapi() {
    stop_strapi
    sleep 2
    start_strapi
}

# Customer Website management
start_customer() {
    log "Starting Customer Website..."
    
    if [[ -f "$PID_DIR/customer.pid" ]]; then
        local pid=$(cat "$PID_DIR/customer.pid")
        if kill -0 "$pid" 2>/dev/null; then
            warning "Customer website already running (PID: $pid)"
            return 0
        fi
    fi
    
    cd "$PROJECT_ROOT/customer-website"
    
    # Install dependencies if needed
    if [[ ! -d "node_modules" ]]; then
        log "Installing customer website dependencies..."
        npm install
    fi
    
    # Start customer website
    if [[ "$ENVIRONMENT" == "development" ]]; then
        nohup npm run dev > "$LOG_DIR/customer.log" 2>&1 &
    else
        npm run build
        nohup npm start > "$LOG_DIR/customer.log" 2>&1 &
    fi
    
    echo $! > "$PID_DIR/customer.pid"
    success "Customer website started (PID: $!)"
}

stop_customer() {
    log "Stopping Customer Website..."
    
    if [[ -f "$PID_DIR/customer.pid" ]]; then
        local pid=$(cat "$PID_DIR/customer.pid")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            rm "$PID_DIR/customer.pid"
            success "Customer website stopped"
        else
            warning "Customer website not running"
            rm -f "$PID_DIR/customer.pid"
        fi
    else
        warning "Customer website PID file not found"
    fi
}

restart_customer() {
    stop_customer
    sleep 2
    start_customer
}

# Employee Operations management
start_employee() {
    log "Starting Employee Operations..."
    
    if [[ -f "$PID_DIR/employee.pid" ]]; then
        local pid=$(cat "$PID_DIR/employee.pid")
        if kill -0 "$pid" 2>/dev/null; then
            warning "Employee operations already running (PID: $pid)"
            return 0
        fi
    fi
    
    cd "$PROJECT_ROOT/employee-ops"
    
    # Install dependencies if needed
    if [[ ! -d "node_modules" ]]; then
        log "Installing employee operations dependencies..."
        npm install
    fi
    
    # Start employee operations
    if [[ "$ENVIRONMENT" == "development" ]]; then
        nohup npm run dev > "$LOG_DIR/employee.log" 2>&1 &
    else
        npm run build
        nohup npm start > "$LOG_DIR/employee.log" 2>&1 &
    fi
    
    echo $! > "$PID_DIR/employee.pid"
    success "Employee operations started (PID: $!)"
}

stop_employee() {
    log "Stopping Employee Operations..."
    
    if [[ -f "$PID_DIR/employee.pid" ]]; then
        local pid=$(cat "$PID_DIR/employee.pid")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            rm "$PID_DIR/employee.pid"
            success "Employee operations stopped"
        else
            warning "Employee operations not running"
            rm -f "$PID_DIR/employee.pid"
        fi
    else
        warning "Employee operations PID file not found"
    fi
}

restart_employee() {
    stop_employee
    sleep 2
    start_employee
}

# Generic service management
start_service() {
    local service=$1
    case $service in
        "database") start_database ;;
        "strapi") start_strapi ;;
        "customer") start_customer ;;
        "employee") start_employee ;;
        "all") 
            start_database
            sleep 3
            start_strapi
            start_customer
            start_employee
            ;;
        *) error "Unknown service: $service" ;;
    esac
}

stop_service() {
    local service=$1
    case $service in
        "database") stop_database ;;
        "strapi") stop_strapi ;;
        "customer") stop_customer ;;
        "employee") stop_employee ;;
        "all")
            stop_employee
            stop_customer
            stop_strapi
            stop_database
            ;;
        *) error "Unknown service: $service" ;;
    esac
}

restart_service() {
    local service=$1
    case $service in
        "database") restart_database ;;
        "strapi") restart_strapi ;;
        "customer") restart_customer ;;
        "employee") restart_employee ;;
        "all")
            stop_service all
            sleep 5
            start_service all
            ;;
        *) error "Unknown service: $service" ;;
    esac
}

# Status checking
status() {
    log "EPG Services Status ($ENVIRONMENT environment):"
    echo
    
    # Database status
    if docker ps | grep -q epg-postgres; then
        echo -e "  ${GREEN}✓ Database${NC} - Running (Docker)"
    else
        echo -e "  ${RED}✗ Database${NC} - Stopped"
    fi
    
    # Check native services
    for service in strapi customer employee; do
        if [[ -f "$PID_DIR/$service.pid" ]]; then
            local pid=$(cat "$PID_DIR/$service.pid")
            if kill -0 "$pid" 2>/dev/null; then
                echo -e "  ${GREEN}✓ $(echo $service | sed 's/.*/\u&/')${NC} - Running (PID: $pid)"
            else
                echo -e "  ${RED}✗ $(echo $service | sed 's/.*/\u&/')${NC} - Dead process"
                rm -f "$PID_DIR/$service.pid"
            fi
        else
            echo -e "  ${RED}✗ $(echo $service | sed 's/.*/\u&/')${NC} - Stopped"
        fi
    done
    
    echo
    log "Logs available in: $LOG_DIR"
    log "PIDs tracked in: $PID_DIR"
}

# Log viewing
logs() {
    local service=${2:-all}
    
    case $service in
        "database")
            docker logs -f epg-postgres
            ;;
        "strapi"|"customer"|"employee")
            if [[ -f "$LOG_DIR/$service.log" ]]; then
                tail -f "$LOG_DIR/$service.log"
            else
                error "Log file not found: $LOG_DIR/$service.log"
            fi
            ;;
        "all")
            log "Showing recent logs from all services..."
            echo "=== Database ==="
            docker logs --tail=10 epg-postgres 2>/dev/null || echo "Database not running"
            echo
            for svc in strapi customer employee; do
                echo "=== $svc ==="
                if [[ -f "$LOG_DIR/$svc.log" ]]; then
                    tail -10 "$LOG_DIR/$svc.log"
                else
                    echo "$svc not running"
                fi
                echo
            done
            ;;
        *)
            error "Unknown service for logs: $service"
            ;;
    esac
}

# Environment switching
switch_env() {
    local new_env=$1
    local new_env_file="$PROJECT_ROOT/.env.$new_env"
    
    if [[ ! -f "$new_env_file" ]]; then
        error "Environment file not found: $new_env_file"
        exit 1
    fi
    
    log "Switching to environment: $new_env"
    
    # Stop all services
    stop_service all
    
    # Switch environment
    ENVIRONMENT=$new_env
    ENV_FILE=$new_env_file
    export $(grep -v '^#' "$ENV_FILE" | xargs)
    
    success "Environment switched to: $new_env"
    log "Use './epg-control start all' to start services with new environment"
}

# Help/Usage
usage() {
    echo "EPG Control Script - Manage EPG Infrastructure"
    echo
    echo "Usage: $0 <command> [service] [environment]"
    echo
    echo "Commands:"
    echo "  start <service>     Start a service"
    echo "  stop <service>      Stop a service"
    echo "  restart <service>   Restart a service"
    echo "  status              Show status of all services"
    echo "  logs [service]      Show logs (default: all)"
    echo "  switch <env>        Switch environment and restart"
    echo "  help                Show this help"
    echo
    echo "Services:"
    echo "  database    PostgreSQL database (Docker)"
    echo "  strapi      Strapi CMS (Native)"
    echo "  customer    Customer website (Native)"
    echo "  employee    Employee operations (Native)"
    echo "  all         All services"
    echo
    echo "Environments:"
    echo "  development (default)"
    echo "  production"
    echo
    echo "Examples:"
    echo "  $0 start all development"
    echo "  $0 restart strapi"
    echo "  $0 logs customer"
    echo "  $0 switch production"
    echo "  $0 status"
}

# Main command handling
case $1 in
    "start")
        if [[ -z $2 ]]; then
            error "Service name required"
            usage
            exit 1
        fi
        start_service $2
        ;;
    "stop")
        if [[ -z $2 ]]; then
            error "Service name required"
            usage
            exit 1
        fi
        stop_service $2
        ;;
    "restart")
        if [[ -z $2 ]]; then
            error "Service name required"
            usage
            exit 1
        fi
        restart_service $2
        ;;
    "status")
        status
        ;;
    "logs")
        logs $1 $2
        ;;
    "switch")
        if [[ -z $2 ]]; then
            error "Environment name required"
            usage
            exit 1
        fi
        switch_env $2
        ;;
    "help"|"--help"|"-h")
        usage
        ;;
    *)
        error "Unknown command: $1"
        usage
        exit 1
        ;;
esac